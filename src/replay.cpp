/*
  ____                                   _             _       
 / ___|  ___  _   _ _ __ ___ ___   _ __ | |_   _  __ _(_)_ __  
 \___ \ / _ \| | | | '__/ __/ _ \ | '_ \| | | | |/ _` | | '_ \ 
  ___) | (_) | |_| | | | (_|  __/ | |_) | | |_| | (_| | | | | |
 |____/ \___/ \__,_|_|  \___\___| | .__/|_|\__,_|\__, |_|_| |_|
                                  |_|            |___/         
# A Template for SourcePlugin, a Source Plugin
# Generated by the command: plugin source -d replay_plugin replay
# Hostname: Fram-IV.local
# Current working directory: /Users/p4010/Develop/MADS_plugins
# Creation date: 2025-09-05T16:04:08.433+0200
# NOTICE: MADS Version 1.3.5
*/
// Mandatory included headers
#include <source.hpp>
#include <nlohmann/json.hpp>
#include <pugg/Kernel.h>
#include <replay.hpp>

// other includes as needed here

// Define the name of the plugin
#ifndef PLUGIN_NAME
#define PLUGIN_NAME "source"
#endif

// Load the namespaces
using namespace std;
using json = nlohmann::json;


// Plugin class. This shall be the only part that needs to be modified,
// implementing the actual functionality
class SourcePlugin : public Source<json> {

public:

  // Typically, no need to change this
  string kind() override { return PLUGIN_NAME; }

  // Implement the actual functionality here
  return_type get_output(json &out,
                         std::vector<unsigned char> *blob = nullptr) override {
    out.clear();

    if (!_replay->has_next()) {
      _error = "No more data to read from CSV file";
      return return_type::critical;
    }
    try {
      out = _replay->advance();
    } catch (const std::exception &e) {
      _error = string("Error reading from CSV file: ") + e.what();
      return return_type::error;
    }

    if (!_agent_id.empty()) out["agent_id"] = _agent_id;

    if (!out["timestamp"].is_null()) {
      _error = "timestamp field name is not allowed, it will be removed";
      out.erase("timestamp");
      return return_type::warning;
    }

    return return_type::success;
  }

  void set_params(void const *params) override {
    // Call the parent class method to set the common parameters 
    // (e.g. agent_id, etc.)
    Source::set_params(params);

    // provide sensible defaults for the parameters by setting e.g.
    _params["loop"] = false;
    _params.merge_patch(*(json *)params);

    _replay = make_unique<Replay>(_params["csv_file"]);
    _replay->set_loop(_params["loop"]);
    _replay->reset();

  }

  // Implement this method if you want to provide additional information
  map<string, string> info() override { 
    // return a map of strings with additional information about the plugin
    // it is used to print the information about the plugin when it is loaded
    // by the agent
    
    return {
      {"CSV file", _params["csv_file"]},
      {"Loop", _params["loop"] ? "true" : "false"}
    };
    
  };

private:
  unique_ptr<Replay> _replay; // alternative using unique_ptr
};


/*
  ____  _             _             _      _
 |  _ \| |_   _  __ _(_)_ __     __| |_ __(_)_   _____ _ __
 | |_) | | | | |/ _` | | '_ \   / _` | '__| \ \ / / _ \ '__|
 |  __/| | |_| | (_| | | | | | | (_| | |  | |\ V /  __/ |
 |_|   |_|\__,_|\__, |_|_| |_|  \__,_|_|  |_| \_/ \___|_|
                |___/
Enable the class as plugin
*/
INSTALL_SOURCE_DRIVER(SourcePlugin, json)


/*
                  _
  _ __ ___   __ _(_)_ __
 | '_ ` _ \ / _` | | '_ \
 | | | | | | (_| | | | | |
 |_| |_| |_|\__,_|_|_| |_|

For testing purposes, when directly executing the plugin
*/
int main(int argc, char const *argv[]) {
  SourcePlugin plugin;
  json output, params;

  // Set example values to params
  params["csv_file"] = "example.csv";
  params["loop"] = false;

  // Set the parameters
  plugin.set_params(&params);

  // Process data
  while (plugin.get_output(output) != return_type::critical) {
    // Produce output
    cout << "Output: " << output << endl;
  }
  return 0;
}
